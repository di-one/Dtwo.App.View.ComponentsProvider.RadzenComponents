@inject NotificationService NotificationService
@implements IMainLayout
@implements IDisposable

<RadzenLayout class="main-layout" style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
    @if (IsLoading)
    {
        <div class="rz-dialog-wrapper" style="background-color:rgba(0,0,0, 0.25); z-index:999">
            <RadzenProgressBarCircular Mode="Radzen.ProgressBarMode.Indeterminate" Size="Radzen.ProgressBarCircularSize.Large" ProgressBarStyle="Radzen.ProgressBarStyle.Primary" ShowValue="false" />
        </div>
    }
    <RadzenHeader>
        <RadzenRow JustifyContent="Radzen.JustifyContent.Start" AlignItems="Radzen.AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack AlignItems="Radzen.AlignItems.Center" Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.End"></RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody Expanded="@sidebarExpanded">
        <RadzenRow class="rz-mx-auto" Style="max-width:1440px;">
            <RadzenColumn Size="12">
                @ChildContent
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
    <RadzenSidebar Expanded="@sidebarExpanded" style="z-index: 2">
        <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
            <RadzenImage Path="assets/img/splash_screen.png"  style="width: 48px; height: 48px;"></RadzenImage>
            <RadzenText Text="Dtwo" TextStyle="Radzen.Blazor.TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
        </RadzenStack>
        <RadzenPanelMenu>
            @foreach (var item in Settings.SideBarEntries)
            {
                <RadzenMainLayoutSidebarEntry Item=item />
            }
        </RadzenPanelMenu>
        <RadzenStack AlignItems="Radzen.AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
            <RadzenText Text="Dtwo Alpha" TextStyle="Radzen.Blazor.TextStyle.Caption" style="color: var(--rz-text-disabled-color);" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
        </RadzenStack>
    </RadzenSidebar>
</RadzenLayout>

<RadzenComponents />

@code {
    [Parameter]
    public MainLayoutSettings Settings { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool IsLoading { get; set; }

    bool sidebarExpanded = true;

    protected override void OnInitialized()
    {
        Notification.OnNotification += OnNotification;
    }

    private void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    private void OnNotification(Notification.NotificationMessage message)
    {
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = GetSeverity(message.Severity),
                Summary = message.Title,
                Detail = message.Text
            });

    }

    private NotificationSeverity GetSeverity(Notification.ESeverity severity)
    {
        NotificationSeverity notificationSeverity = NotificationSeverity.Info;

        switch (severity)
        {
            case Notification.ESeverity.Info:
                notificationSeverity = NotificationSeverity.Info;
                break;
            case Notification.ESeverity.Warning:
                notificationSeverity = NotificationSeverity.Warning;
                break;
            case Notification.ESeverity.Error:
                notificationSeverity = NotificationSeverity.Error;
                break;
        }

        return notificationSeverity;
    }

    public void Dispose()
    {
        Notification.OnNotification -= OnNotification;
    }
}